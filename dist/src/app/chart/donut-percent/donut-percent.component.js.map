{"version":3,"file":"donut-percent.component.js","sourceRoot":"","sources":["../../../../../build/src/app/chart/donut-percent/donut-percent.component.ts"],"names":[],"mappings":"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","sourcesContent":["import { Component, DoCheck, Input, OnInit } from '@angular/core';\n\nimport { cloneDeep, defaults, isEqual, merge } from 'lodash';\nimport { Subscription } from 'rxjs/Subscription';\n\nimport { ChartDefaults } from '../chart.defaults';\nimport { ChartBase } from '../chart.base';\nimport { DonutPercentConfig } from './donut-percent-config';\n\nimport * as d3 from 'd3';\n\n@Component({\n  selector: 'pfng-chart-donut-percent',\n  template: `<div #chartElement id=\"{{donutChartId}}\"></div>`\n})\nexport class DonutPercentComponent extends ChartBase implements DoCheck, OnInit {\n\n  @Input() chartData: any;\n  @Input() config: DonutPercentConfig;\n\n  public donutChartId: any;\n\n  private prevChartData: any;\n  private currentThreshold = 'none';\n\n  private subscriptions: Subscription[] = [];\n\n  /**\n   * Default constructor\n   * @param chartDefaults\n   */\n  constructor(private chartDefaults: ChartDefaults) {\n    super();\n  }\n\n  ngOnInit(): void {\n    this.donutChartId = 'donutPctChart';\n    if (this.config.chartId) {\n      this.donutChartId = this.config.chartId + this.donutChartId;\n    }\n\n    this.subscriptions.push(this.chartLoaded.subscribe({\n      next: (chart: any) => {\n        this.chartAvailable(chart);\n      }\n    }));\n\n    this.setupConfigDefaults();\n  }\n\n  ngDoCheck(): void {\n    if (!isEqual(this.config, this.prevConfig) || !isEqual(this.chartData, this.prevChartData)) {\n      this.updateConfig();\n      this.generateChart(this.donutChartId, true);\n      this.prevChartData = cloneDeep(this.chartData);\n    }\n  }\n\n  ngOnDestroy(): void {\n    this.subscriptions.forEach(sub => sub.unsubscribe);\n  }\n\n  // Public for testing\n  public getCenterLabelText(): any {\n    let centerLabelText;\n\n    // default to 'used' info.\n    centerLabelText = {\n      bigText: this.chartData.used,\n      smText: this.config.units + ' Used'\n    };\n\n    if (this.config.centerLabel) {\n      centerLabelText.bigText = this.config.centerLabel;\n      centerLabelText.smText = '';\n    } else if (this.config.centerLabelType === 'none') {\n      centerLabelText.bigText = '';\n      centerLabelText.smText = '';\n    } else if (this.config.centerLabelType === 'available') {\n      centerLabelText.bigText = this.chartData.available;\n      centerLabelText.smText = this.config.units + ' Available';\n    } else if (this.config.centerLabelType === 'percent') {\n      centerLabelText.bigText = Math.round(this.chartData.used / this.chartData.total * 100.0) + '%';\n      centerLabelText.smText = 'of ' + this.chartData.total + ' ' + this.config.units;\n    }\n\n    return centerLabelText;\n  }\n\n  private updateAvailable(): void {\n    this.chartData.available = this.chartData.total - this.chartData.used;\n  }\n\n  private updatePercentage(): void {\n    this.chartData.percent = Math.round(this.chartData.used / this.chartData.total * 100.0);\n  }\n\n  private getStatusColor(used: any, thresholds: any) {\n    let threshold = 'none';\n    let color = this.chartDefaults.pfPaletteColors.blue;\n\n    if (thresholds) {\n      threshold = 'ok';\n      color = this.chartDefaults.pfPaletteColors.green;\n      if (used >= thresholds.error) {\n        threshold = 'error';\n        color = this.chartDefaults.pfPaletteColors.red;\n      } else if (used >= thresholds.warning) {\n        threshold = 'warning';\n        color = this.chartDefaults.pfPaletteColors.orange;\n      }\n    }\n\n    if (!threshold || this.currentThreshold !== threshold) {\n      this.currentThreshold = threshold;\n      if (this.config.onThresholdChange) {\n        this.config.onThresholdChange({ threshold: this.currentThreshold });\n      }\n    }\n\n    return color;\n  }\n\n  private getDonutStatusColor(): any {\n    let percentUsed = this.chartData.used / this.chartData.total * 100.0;\n\n    return {\n      pattern: [\n        this.getStatusColor(percentUsed, this.config.thresholds),\n        this.chartDefaults.pfPaletteColors.black300\n      ]\n    };\n  }\n\n  private donutTooltip(): any {\n    return {\n      contents: (data: any) => {\n        let tooltipHtml;\n\n        if (this.config.tooltipFn) {\n          tooltipHtml = '<span class=\"donut-tooltip-pf\" style=\"white-space: nowrap;\">' +\n            this.config.tooltipFn(data) +\n            '</span>';\n        } else {\n          tooltipHtml = '<span class=\"donut-tooltip-pf\" style=\"white-space: nowrap;\">' +\n            Math.round(data[0].ratio * 100) + '%' + ' ' + this.config.units + ' ' + data[0].name +\n            '</span>';\n        }\n\n        return tooltipHtml;\n      }\n    };\n  }\n\n  private chartAvailable(chart: any): void {\n    this.setupDonutChartTitle(chart);\n  }\n\n  private getTotal(): number {\n    let total = 0;\n    this.chartData.forEach((element: any) => {\n      if (!isNaN(element[1])) {\n        total += Number(element[1]);\n      }\n    });\n\n    return total;\n  }\n\n\n  private setupDonutChartTitle(chart: any): void {\n    let donutChartTitle, centerLabelText;\n\n    if (!chart) {\n      return;\n    }\n\n    donutChartTitle = d3.select(chart.element).select('text.c3-chart-arcs-title');\n    if (!donutChartTitle) {\n      return;\n    }\n\n    centerLabelText = this.getCenterLabelText();\n\n    donutChartTitle.text('');\n    if (centerLabelText.bigText && !centerLabelText.smText) {\n      donutChartTitle.text(centerLabelText.bigText);\n    } else {\n      donutChartTitle.insert('tspan', null).text(centerLabelText.bigText)\n        .classed('donut-title-big-pf', true).attr('dy', 0).attr('x', 0);\n      donutChartTitle.insert('tspan', null).text(centerLabelText.smText).\n        classed('donut-title-small-pf', true).attr('dy', 20).attr('x', 0);\n    }\n  }\n\n  private getDonutData(chartData: any): any {\n    this.updateAvailable();\n    this.updatePercentage();\n    return {\n      columns: [\n        ['Used', this.chartData.used],\n        ['Available', this.chartData.available]\n      ],\n      type: 'donut',\n      donut: {\n        label: {\n          show: false\n        }\n      },\n      groups: [\n        ['used', 'available']\n      ],\n      order: null\n    };\n  }\n\n  private setupConfigDefaults(): void {\n    let defaultConfig = this.chartDefaults.getDefaultDonutConfig();\n    let defaultDonut = this.chartDefaults.getDefaultDonut();\n\n    defaults(this.config, defaultConfig);\n    defaults(this.config.donut, defaultDonut);\n  }\n\n  private updateConfig(): void {\n\n    this.config.data = merge(this.config.data, this.getDonutData(this.chartData));\n\n    if (this.config.chartHeight) {\n      this.config.size.height = this.config.chartHeight;\n    }\n\n    if (this.config.onClickFn) {\n      this.config.data.onclick = this.config.onClickFn;\n    }\n    this.config.color = this.getDonutStatusColor();\n    this.config.tooltip = this.donutTooltip();\n  }\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}