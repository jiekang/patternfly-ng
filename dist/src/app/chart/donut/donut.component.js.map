{"version":3,"file":"donut.component.js","sourceRoot":"","sources":["../../../../../build/src/app/chart/donut/donut.component.ts"],"names":[],"mappings":"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","sourcesContent":["import { Component, DoCheck, Input, OnInit } from '@angular/core';\n\nimport { cloneDeep, defaults, isEqual, merge, uniqueId } from 'lodash';\nimport { Subscription } from 'rxjs/Subscription';\n\nimport { ChartDefaults } from '../chart.defaults';\nimport { ChartBase } from '../chart.base';\nimport { DonutConfig } from './donut-config';\n\nimport * as d3 from 'd3';\n\n@Component({\n  selector: 'pfng-chart-donut',\n  template: `<div #chartElement id=\"{{config.chartId}}\"></div>`\n})\nexport class DonutComponent extends ChartBase implements DoCheck, OnInit {\n\n  @Input() chartData: any;\n  @Input() config: DonutConfig;\n\n  private prevChartData: any;\n\n  private subscriptions: Subscription[] = [];\n\n  /**\n   * Default constructor\n   * @param chartDefaults\n   */\n  constructor(private chartDefaults: ChartDefaults) {\n    super();\n  }\n\n  ngOnInit(): void {\n    if (!this.config.chartId) {\n      throw new Error('DonutComponent: config must have string property chartId');\n    }\n    this.config.chartId = uniqueId(this.config.chartId);\n\n    this.subscriptions.push(this.chartLoaded.subscribe({\n      next: (chart: any) => {\n        this.chartAvailable(chart);\n      }\n    }));\n\n    this.setupConfigDefaults();\n  }\n\n  ngDoCheck(): void {\n    if (!isEqual(this.config, this.prevConfig)) {\n      this.updateConfig();\n      this.generateChart(this.config.chartId, true);\n    } else if (!isEqual(this.chartData, this.prevChartData)) {\n      this.config.data = merge(this.config.data, this.getDonutData(this.chartData));\n      this.generateChart(this.config.chartId, false);\n      this.prevChartData = cloneDeep(this.chartData);\n    }\n  }\n\n  ngOnDestroy(): void {\n    this.subscriptions.forEach(sub => sub.unsubscribe);\n  }\n\n  // Public for testing\n  public getCenterLabelText(): any {\n    let centerLabelText = {\n      bigText: this.getTotal(),\n      smText: this.config.donut.title\n    };\n\n    if (this.config.centerLabel) {\n      centerLabelText.bigText = this.config.centerLabel;\n      centerLabelText.smText = '';\n    }\n\n    return centerLabelText;\n  }\n\n  private chartAvailable(chart: any): void {\n    this.setupDonutChartTitle(chart);\n  }\n\n  private getTotal(): number {\n    let total = 0;\n    this.chartData.forEach((element: any) => {\n      if (!isNaN(element[1])) {\n        total += Number(element[1]);\n      }\n    });\n\n    return total;\n  }\n\n  private setupDonutChartTitle(chart: any): void {\n    let donutChartTitle, centerLabelText;\n\n    if (!chart) {\n      return;\n    }\n\n    donutChartTitle = d3.select(chart.element).select('text.c3-chart-arcs-title');\n    if (!donutChartTitle) {\n      return;\n    }\n\n    centerLabelText = this.getCenterLabelText();\n\n    donutChartTitle.text('');\n    if (centerLabelText.bigText && !centerLabelText.smText) {\n      donutChartTitle.text(centerLabelText.bigText);\n    } else {\n      donutChartTitle.insert('tspan', null).text(centerLabelText.bigText)\n        .classed('donut-title-big-pf', true).attr('dy', 0).attr('x', 0);\n      donutChartTitle.insert('tspan', null).text(centerLabelText.smText).\n        classed('donut-title-small-pf', true).attr('dy', 20).attr('x', 0);\n    }\n  }\n\n  private getDonutData(chartData: any): any {\n    return {\n      type: 'donut',\n      columns: this.chartData,\n      order: null,\n      colors: this.config.colors\n    };\n  }\n\n  private setupConfigDefaults(): void {\n    let defaultConfig = this.chartDefaults.getDefaultDonutConfig();\n    let defaultDonut = this.chartDefaults.getDefaultDonut();\n\n    defaults(this.config, defaultConfig);\n    defaults(this.config.donut, defaultDonut);\n  }\n\n  private updateConfig(): void {\n    this.config.data = merge(this.config.data, this.getDonutData(this.chartData));\n\n    if (this.config.chartHeight) {\n      this.config.size.height = this.config.chartHeight;\n    }\n\n    if (this.config.onClickFn) {\n      this.config.data.onclick = this.config.onClickFn;\n    }\n\n    this.config.tooltip = { contents: (window as any).patternfly.pfDonutTooltipContents };\n  }\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}